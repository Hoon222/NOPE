import time
import pyupbit
import datetime
import schedule
import requests

from fbprophet import Prophet

access = "W1GrhxCCTYfLblVTNcXWzZKEpKh8XB8LOfYt6xsy "
secret = "f9L0nYI73rlUtwrS6hbzVc00BCHx1TaA7CtG9l0g"
myToken = "xoxb-2436109877958-2440029299653-qzAva93TBSLMAmNtBB4zYn1l"

def post_message(token, channel, text):
    """슬랙 메시지 전송"""
    response = requests.post("https://slack.com/api/chat.postMessage",
        headers={"Authorization": "Bearer "+token},
        data={"channel": channel,"text": text}
    )



def get_target_price(ticker, k):
    """변동성 돌파 전략으로 매수 목표가 조회""" # 5일동안 가격 조회
    df = pyupbit.get_ohlcv(ticker, interval="day", count=5)
    target_price = df.iloc[0]['close'] + (df.iloc[0]['high'] - df.iloc[0]['low']) * k
    return target_price

def get_start_time(ticker):
    """시작 시간 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="day", count=1)
    start_time = df.index[0]
    return start_time

def get_ma50(ticker):
    """50일 이동 평균선 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="day", count=50)
    ma50 = df['close'].rolling(50).mean().iloc[-1]
    return ma50 

def get_balance(ticker):
    """잔고 조회"""
    balances = upbit.get_balances()
    for b in balances:
        if b['currency'] == ticker:
            if b['balance'] is not None:
                return float(b['balance'])
            else:
                return 0
    return 0

def get_current_price(ticker):
    """현재가 조회"""
    return pyupbit.get_orderbook(tickers=ticker)[0]["orderbook_units"][0]["ask_price"]

predicted_close_price = 0
def predict_price(ticker):
    """Prophet으로 당일 종가 가격 예측"""
    global predicted_close_price
    #60분 간격으로 AI 예측
    df = pyupbit.get_ohlcv(ticker, interval="minute60")
    df = df.reset_index()
    df['ds'] = df['index']
    df['y'] = df['close']
    data = df[['ds','y']]
    model = Prophet()
    model.fit(data)
    future = model.make_future_dataframe(periods=24, freq='H')
    forecast = model.predict(future)
    closeDf = forecast[forecast['ds'] == forecast.iloc[-1]['ds'].replace(hour=9)]
    if len(closeDf) == 0:
        closeDf = forecast[forecast['ds'] == data.iloc[-1]['ds'].replace(hour=9)]
    closeValue = closeDf['yhat'].values[0]
    predicted_close_price = closeValue
predict_price("KRW-XRP")
schedule.every().hour.do(lambda: predict_price("KRW-XRP"))
schedule.every().hour.do(lambda: post_message(myToken,"#hooncoin", "XRP AI value :" +str(predicted_close_price)))




# 로그인
upbit = pyupbit.Upbit(access, secret)
print("autotrade start")
post_message(myToken,"#hooncoin", "HoonAIbot Start ")
post_message(myToken,"#hooncoin", "XRP AI value :" +str(predicted_close_price))


# 자동매매 시작
while True:
    try:
        now = datetime.datetime.now()
        start_time = get_start_time("KRW-XRP") + datetime.timedelta(minutes=30)
        end_time = start_time + datetime.timedelta(days=1)

        last_df = pyupbit.get_ohlcv(interval="day", count=2)
        last_low = last_df.iloc[0]['low']

        schedule.run_pending()
        
        #오전 9시30분 < 현재 < 오전 8시 50분 에만 작동
        if start_time < now < end_time - datetime.timedelta(minutes=40):
            target_price = get_target_price("KRW-XRP", 0.2)
            ma50 = get_ma50("KRW-XRP")
            current_price = get_current_price("KRW-XRP")

                               #목표가격 < 현재가격 + 50일 이평선 < AI예측가격 보다 클 경우                                  
            if target_price < current_price and ma50 < predicted_close_price:  
                 krw = get_balance("KRW")        
                 if krw > 5000:
                 #리플 매수
                  buy_result = upbit.buy_market_order("KRW-XRP", krw*0.9995)
                  post_message(myToken,"#hooncoin", "XRP buy : " +str(buy_result))   
                  # 현재가격이 예측가격보다 클경우 
        else:   
            if current_price > predicted_close_price:             
               xrp = get_balance("XRP")
            if xrp > 0.00008:
                # 리플매도
                  sell_result = upbit.sell_market_order("KRW-XRP", xrp*0.9995)
                  post_message(myToken,"#hooncoin", "XRP buy : " +str(sell_result))
                  
             #오전 8시 50분 리플 일괄매도 
            if start_time > now > end_time - datetime.timedelta(seconds=10):
                xrp = get_balance("XRP")  
                if xrp > 0.00008:
                 sell_result = upbit.sell_market_order("KRW-XRP", xrp*0.9995)
                post_message(myToken,"#hooncoin", "XRP buy : " +str(sell_result))    
        time.sleep(1)
    except Exception as e:
        print(e)
        post_message(myToken,"#hooncoin", e)
        time.sleep(1)
