
def get_target_price(ticker, k):
    """매수 목표가 조회""" # 5일동안 가격 조회
    df = pyupbit.get_ohlcv(ticker, interval="day", count=5)
    target_price = df.iloc[0]['close'] + (df.iloc[0]['high'] - df.iloc[0]['low']) * k
    return target_price

def get_start_time(ticker):
    """시작 시간"""
    df = pyupbit.get_ohlcv(ticker, interval="day", count=1)
    start_time = df.index[0]
    return start_time

def get_ma50(ticker):
    """50일 이평선 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="day", count=50)
    ma50 = df['close'].rolling(50).mean().iloc[-1]
    return ma50 

def get_balance(ticker):
    """내 잔고 """
    balances = upbit.get_balances()
    for b in balances:
        if b['currency'] == ticker:
            if b['balance'] is not None:
                return float(b['balance'])
            else:
                return 0
    return 0

def get_current_price(ticker):
    """현재 리플 가격 """
    return pyupbit.get_orderbook(tickers=ticker)[0]["orderbook_units"][0]["ask_price"]

predicted_close_price = 0
def predict_price(ticker):
    """Prophet으로 당일 종가 가격 예측"""
    global predicted_close_price
    #30분 간격으로 AI 예측
    df = pyupbit.get_ohlcv(ticker, interval="minute30")
    df = df.reset_index()
    df['ds'] = df['index']
    df['y'] = df['close']
    data = df[['ds','y']]
    model = Prophet()
    model.fit(data)
    future = model.make_future_dataframe(periods=24, freq='H')
    forecast = model.predict(future)
    closeDf = forecast[forecast['ds'] == forecast.iloc[-1]['ds'].replace(hour=9)]
    if len(closeDf) == 0:
        closeDf = forecast[forecast['ds'] == data.iloc[-1]['ds'].replace(hour=9)]
    closeValue = closeDf['yhat'].values[0]
    predicted_close_price = closeValue
predict_price("KRW-XRP")
schedule.every(30).minutes.do(lambda: predict_price("KRW-XRP"))
schedule.every(30).minutes.do(lambda: post_message(myToken,"#hooncoin", "XRP AI value :" +str(predicted_close_price)))



# 로그인
upbit = pyupbit.Upbit(access, secret)
print("start")
post_message(myToken,"#hooncoin", "HoonAIbot Start ")
post_message(myToken,"#hooncoin", "XRP AI value :" +str(predicted_close_price))


#매매 시작
while True:
    try:
        now = datetime.datetime.now()
        start_time = get_start_time("KRW-XRP")
        end_time = start_time + datetime.timedelta(days=1)
        schedule.run_pending()
        
        #9시 < 현재 < 8시 50분
        if start_time < now < end_time - datetime.timedelta(minutes=10):
            target_price = get_target_price("KRW-XRP", 0.2)
            ma50 = get_ma50("KRW-XRP")
            current_price = get_current_price("KRW-XRP")

            if target_price < current_price and ma50 < predicted_close_price:
                krw = get_balance("KRW")
                if krw > 5000:
                  buy_result = upbit.buy_market_order("KRW-XRP", krw*0.9995)
                  post_message(myToken,"#hooncoin", "XRP buy : " +str(buy_result)) 
                        
                 
        else:
            xrp = get_balance("XRP")
            if xrp > 0.00008:
              sell_result = upbit.sell_market_order("KRW-XRP", xrp*0.9995)
              post_message(myToken,"#hooncoin", "XRP buy : " +str(sell_result))
        time.sleep(1)
        
        
    except Exception as e:
        print(e)
        post_message(myToken,"#hooncoin", e)
        time.sleep(1)
